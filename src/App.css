import React, { useState, useEffect } from 'react';
import { Calendar, Monitor, Settings, Search, Plus, Edit3, CheckCircle, AlertCircle, Clock } from 'lucide-react';

const MaintenanceApp = () => {
  const [machines, setMachines] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedSector, setSelectedSector] = useState('');
  const [showAddForm, setShowAddForm] = useState(false);
  const [editingMachine, setEditingMachine] = useState(null);

  // Dados iniciais da planilha
  const initialData = [
    { setor: 'TI', maquina: 'infoti-pc', etiqueta: '', chamado: '', proximaManutencao: '', dataRealizacao: '' },
    { setor: 'TI', maquina: 'info-pc', etiqueta: 'MA-5L6M7N8-L', chamado: '', proximaManutencao: '', dataRealizacao: '' },
    // ... (todos os outros itens da sua lista original)
  ];

  useEffect(() => {
    const machinesWithId = initialData.map((machine, index) => ({
      ...machine,
      id: index + 1,
      status: machine.dataRealizacao ? 'concluido' : machine.proximaManutencao ? 'agendado' : 'pendente'
    }));
    setMachines(machinesWithId);
  }, []);

  const sectors = [...new Set(machines.map(m => m.setor))].sort();

  const filteredMachines = machines.filter(machine => {
    const matchesSearch = machine.maquina.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         machine.etiqueta.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesSector = selectedSector === '' || machine.setor === selectedSector;
    return matchesSearch && matchesSector;
  });

  const getStatusColor = (status) => {
    switch(status) {
      case 'concluido': return 'bg-green-100 text-green-800 border-green-200';
      case 'agendado': return 'bg-blue-100 text-blue-800 border-blue-200';
      case 'pendente': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getStatusIcon = (status) => {
    switch(status) {
      case 'concluido': return <CheckCircle className="w-4 h-4" />;
      case 'agendado': return <Calendar className="w-4 h-4" />;
      case 'pendente': return <AlertCircle className="w-4 h-4" />;
      default: return <Clock className="w-4 h-4" />;
    }
  };

  const getSectorColor = (sector) => {
    const colors = {
      'TI': 'bg-purple-500',
      'DIR': 'bg-red-500',
      'BAL': 'bg-green-500',
      'FIN': 'bg-blue-500',
      'FAT': 'bg-yellow-500',
      'LOG': 'bg-indigo-500',
      'TLM': 'bg-pink-500',
      'COM': 'bg-teal-500',
      'DEP': 'bg-orange-500',
      'IND': 'bg-cyan-500',
      'DP': 'bg-lime-500',
      'WMS': 'bg-violet-500',
      'REC': 'bg-amber-500',
      'ROT': 'bg-emerald-500',
      'SPCOM': 'bg-rose-500',
      'CX': 'bg-sky-500'
    };
    return colors[sector] || 'bg-gray-500';
  };

  const handleEdit = (machine) => {
    setEditingMachine(machine);
    setShowAddForm(true);
  };

  const handleSave = (formData) => {
    if (editingMachine) {
      setMachines(machines.map(m => 
        m.id === editingMachine.id ? { ...m, ...formData } : m
      ));
    } else {
      const newMachine = {
        ...formData,
        id: Math.max(...machines.map(m => m.id)) + 1
      };
      setMachines([...machines, newMachine]);
    }
    setShowAddForm(false);
    setEditingMachine(null);
  };

  const MachineForm = ({ machine, onSave, onCancel }) => {
    const [formData, setFormData] = useState(machine || {
      setor: '',
      maquina: '',
      etiqueta: '',
      chamado: '',
      proximaManutencao: '',
      dataRealizacao: '',
      status: 'pendente'
    });

    const handleSubmit = () => {
      onSave(formData);
    };

    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
        <div className="bg-white rounded-xl p-6 w-full max-w-md">
          <h3 className="text-xl font-bold mb-4">
            {machine ? 'Editar Máquina' : 'Nova Máquina'}
          </h3>
          <div className="space-y-4">
            {/* ... (mantenha o formulário existente) */}
          </div>
        </div>
      </div>
    );
  };

  const stats = {
    total: machines.length,
    concluido: machines.filter(m => m.status === 'concluido').length,
    agendado: machines.filter(m => m.status === 'agendado').length,
    pendente: machines.filter(m => m.status === 'pendente').length
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50">
      <div className="container mx-auto px-4 py-8">
        <div className="bg-white rounded-2xl shadow-xl p-8 mb-8">
          
          {/* Cabeçalho */}
          <div className="flex items-center justify-between mb-8">
            <div className="flex items-center gap-4">
              <div className="bg-blue-600 p-3 rounded-xl">
                <Settings className="w-8 h-8 text-white" />
              </div>
              <div>
                <h1 className="text-3xl font-bold text-gray-800">
                  Sistema de Manutenção Preventiva
                </h1>
                <p className="text-gray-600">Gestão automatizada de equipamentos</p>
              </div>
            </div>
            <button
              onClick={() => setShowAddForm(true)}
              className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-xl flex items-center gap-2 transition-colors"
            >
              <Plus className="w-5 h-5" />
              Nova Máquina
            </button>
          </div>

          {/* Cards de Estatísticas */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
            {/* ... (mantenha seus cards de stats) */}
          </div>

          {/* Filtros */}
          <div className="flex flex-col md:flex-row gap-4 mb-8">
            {/* ... (mantenha seus filtros) */}
          </div>

          {/* Grid de Máquinas */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {filteredMachines.map((machine) => (
              <div key={machine.id} className="bg-white border border-gray-200 rounded-xl p-6 hover:shadow-lg transition-shadow">
                <div className="flex items-center justify-between mb-4">
                  <div className="flex items-center gap-3">
                    <div className={`w-3} h-3 rounded-full ${getSectorColor(machine.setor)}`}></div>
                    <span className="font-medium text-gray-600">{machine.setor}</span>
                  </div>
                  <button
                    onClick={() => handleEdit(machine)}
                    className="p-2 text-gray-400 hover:text-blue-600 transition-colors"
                  >
                    <Edit3 className="w-4 h-4" />
                  </button>
                </div>
                
                <div className="mb-4">
                  <h3 className="font-bold text-lg text-gray-800 mb-1">{machine.maquina}</h3>
                  <p className="text-sm text-gray-600">{machine.etiqueta}</p>
                </div>

                <div className="space-y-2 mb-4">
                  {machine.chamado && (
                    <div className="text-sm">
                      <span className="text-gray-500">Chamado:</span>
                      <span className="ml-2 text-gray-800">{machine.chamado}</span>
                    </div>
                  )}
                  {machine.proximaManutencao && (
                    <div className="text-sm">
                      <span className="text-gray-500">Próxima:</span>
                      <span className="ml-2 text-gray-800">{machine.proximaManutencao}</span>
                    </div>
                  )}
                  {machine.dataRealizacao && (
                    <div className="text-sm">
                      <span className="text-gray-500">Realizada:</span>
                      <span className="ml-2 text-gray-800">{machine.dataRealizacao}</span>
                    </div>
                  )}
                </div>

                <div className={`inline-flex items-center gap-2 px-3 py-1 rounded-full text-sm border ${getStatusColor(machine.status)}`}>
                  {getStatusIcon(machine.status)}
                  <span className="capitalize">{machine.status}</span>
                </div>
              </div>
            ))}
          </div>

          {filteredMachines.length === 0 && (
            <div className="text-center py-12">
              <Monitor className="w-16 h-16 text-gray-300 mx-auto mb-4" />
              <p className="text-gray-500 text-lg">Nenhuma máquina encontrada</p>
            </div>
          )}
        </div>
      </div>

      {showAddForm && (
        <MachineForm
          machine={editingMachine}
          onSave={handleSave}
          onCancel={() => {
            setShowAddForm(false);
            setEditingMachine(null);
          }}
        />
      )}
    </div>
  );
};

export default MaintenanceApp;